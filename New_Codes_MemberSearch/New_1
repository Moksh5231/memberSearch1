pom.xml
--------
<dependencies>
    <!-- Serenity BDD dependencies -->
    <dependency>
        <groupId>net.serenity-bdd</groupId>
        <artifactId>serenity-core</artifactId>
        <version>3.3.0</version>
    </dependency>
    <dependency>
        <groupId>net.serenity-bdd</groupId>
        <artifactId>serenity-junit</artifactId>
        <version>3.3.0</version>
    </dependency>
    <dependency>
        <groupId>net.serenity-bdd</groupId>
        <artifactId>serenity-rest-assured</artifactId>
        <version>3.3.0</version>
    </dependency>
    <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.13.2</version>
        <scope>test</scope>
    </dependency>
    <!-- RestAssured dependency -->
    <dependency>
        <groupId>io.rest-assured</groupId>
        <artifactId>rest-assured</artifactId>
        <version>4.4.0</version>
        <scope>test</scope>
    </dependency>
</dependencies>
--------------------

@controllertest
--------------
package com.aetna.clinical.web.tests;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import net.serenitybdd.junit.runners.SerenityRunner;
import net.serenitybdd.rest.SerenityRest;
import net.thucydides.core.annotations.Step;
import net.thucydides.core.annotations.Steps;
import net.thucydides.core.annotations.Title;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.HashMap;
import java.util.Map;

@RunWith(SerenityRunner.class)
public class MemberSearchControllerTest {

    private static final String BASE_URL = "http://localhost:8080"; // Update with your server URL

    @Before
    public void setUp() {
        RestAssured.baseURI = BASE_URL;
    }

    @Test
    @Title("Test the POST /memberSearch API")
    public void testPostMemberSearch() {
        Map<String, Object> response = SerenityRest.given()
                .contentType("application/json")
                .when()
                .post("/memberSearch")
                .then()
                .statusCode(200)
                .extract()
                .as(Map.class);

        Assert.assertEquals("success", response.get("status"));
        Assert.assertEquals("Hello World", response.get("message"));
    }

    @Test
    @Title("Test the GET /memberSearch API with memberId")
    public void testGetMemberById() {
        Response response = SerenityRest.given()
                .queryParam("memberId", "12345")
                .when()
                .get("/memberSearch")
                .then()
                .statusCode(200)
                .extract()
                .response();

        Assert.assertNotNull(response.getBody().asString());
    }

    @Test
    @Title("Test the GET /memberSearch API with name and date of birth")
    public void testGetMemberByNameAndDob() {
        Response response = SerenityRest.given()
                .queryParam("nameFirst", "John")
                .queryParam("nameLast", "Doe")
                .queryParam("dateOfBirth", "1990-01-01")
                .when()
                .get("/memberSearch")
                .then()
                .statusCode(200)
                .extract()
                .response();

        Assert.assertNotNull(response.getBody().asString());
    }

    @Test
    @Title("Test the GET /memberSearch API with phone number")
    public void testGetMemberByPhoneNumber() {
        Response response = SerenityRest.given()
                .queryParam("phoneNumber", "1234567890")
                .when()
                .get("/memberSearch")
                .then()
                .statusCode(200)
                .extract()
                .response();

        Assert.assertNotNull(response.getBody().asString());
    }
}
--------------------------------

mvn clean verify
