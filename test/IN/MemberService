package com.aetna.clinical.common.service;

import com.aetna.clinical.common.client.NewMemberClient;
import com.aetna.clinical.common.dto.test.Dependent;
import com.aetna.clinical.common.dto.test.Member;
import com.aetna.clinical.common.dto.test.Response;

import com.fasterxml.jackson.databind.node.ObjectNode;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;

@Service
public class NewMemberService {

    private static final Logger logger = LoggerFactory.getLogger(MemberService.class);
    private final NewMemberClient memberClient;

    @Autowired
    public NewMemberService(NewMemberClient memberClient) {
        this.memberClient = memberClient;
    }

    public ResponseEntity<Response> getMemberDetails(String memberId, String token) {
        ResponseEntity<Response> response = memberClient.getMemberById(memberId, token); // Updated to Response
        return transformMemberResponse(response.getBody());
    }

    private ResponseEntity<Response> transformMemberResponse(Response response) {
        List<ObjectNode> accounts = new ArrayList<>();

        response.

        if (response != null && response.getMembers() != null) { // Assuming Response has a getMembers method
            for (Member member : response.getMembers().getMember()) {
                if ("41".equals(member.getMemberIdentifier().getIdSource())) {
                    // Process subscriber
                    if (member.getSubscriber() != null) {
                        processMember(accounts, member.getSubscriber().getPerson(), member.getMemberships());
                    }

                    // Process dependents
                    if (member.getDependents() != null) {
                        for (Dependent dependent : member.getDependents()) {
                            processMember(accounts, dependent.getPerson(), dependent.getMembershipIdentifier());
                        }
                    }
                }
            }
        }

        Response memberResponse = new Response();
        memberResponse.setAccount(accounts);

        return ResponseEntity.ok(memberResponse);
    }

    private void processMember(List<ObjectNode> accounts, Person person, List<Membership> memberships) {
        if (memberships != null && !memberships.isEmpty()) {
            String cmmId = memberships.get(0).getMembershipIdentifier().getResourceId();
            String name = person.getNameFirst() + " " + person.getNameLast();
            String dob = person.getDateOfBirth();

            ObjectNode account = accounts.addObject();
            account.put("CMMid", cmmId);
            account.put("name", name);
            account.put("DOB", dob != null ? dob : "");
            account.put("Status", memberships.get(0).getStatus() != null ? memberships.get(0).getStatus() : "");
            account.put("Gender", person.getGender() != null ? person.getGender() : "");
            account.put("StartDate", "");
            account.put("EndDate", "");
        }
    }

    private void processMember(List<ObjectNode> accounts, Person person, MembershipIdentifier membershipIdentifier) {
        ObjectNode account = accounts.addObject();
        account.put("CMMid", membershipIdentifier.getResourceId());
        account.put("name", person.getNameFirst() + " " + person.getNameLast());
        account.put("DOB", "");
        account.put("Status", "");
        account.put("Gender", "");
        account.put("StartDate", "");
        account.put("EndDate", "");
    }
}
