package com.aetna.clinical.common.service;

import com.aetna.clinical.common.client.NewMemberClient;
import com.aetna.clinical.common.dto.test.Dependent;
import com.aetna.clinical.common.dto.test.Member;
import com.aetna.clinical.common.dto.test.Response;
import com.aetna.clinical.common.dto.test.Account; // Ensure this import is present
import com.aetna.clinical.common.dto.test.Person; // Ensure this import is present
import com.aetna.clinical.common.dto.test.Membership; // Ensure this import is present
import com.aetna.clinical.common.dto.test.MembershipIdentifier; // Ensure this import is present

import com.fasterxml.jackson.databind.node.ObjectNode;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;

@Service
public class NewMemberService {

    private static final Logger logger = LoggerFactory.getLogger(NewMemberService.class);
    private final NewMemberClient memberClient;

    @Autowired
    public NewMemberService(NewMemberClient memberClient) {
        this.memberClient = memberClient;
    }

    public ResponseEntity<Response> getMemberDetails(String memberId, String token) {
        ResponseEntity<Response> response = memberClient.getMemberById(memberId, token);
        return transformMemberResponse(response.getBody());
    }

    private ResponseEntity<Response> transformMemberResponse(Response response) {
        List<Account> accounts = new ArrayList<>();

        if (response != null && response.getMembers() != null) {
            for (Member member : response.getMembers().getMember()) {
                // Process subscriber
                if (member.getSubscriber() != null) {
                    processMember(accounts, member.getSubscriber().getPerson(), member.getMemberships());
                }

                // Process dependents
                if (member.getDependents() != null) {
                    for (Dependent dependent : member.getDependents()) {
                        processDependent(accounts, dependent);
                    }
                }
            }
        }

        Response transformedResponse = new Response();
        transformedResponse.setAccount(accounts); // Ensure setAccount method can handle a list

        return ResponseEntity.ok(transformedResponse);
    }

    private void processMember(List<Account> accounts, Person person, List<Membership> memberships) {
        if (memberships != null && !memberships.isEmpty()) {
            String cmmId = memberships.get(0).getMembershipIdentifier().getResourceId();
            String name = person.getNameFirst() + " " + person.getNameLast();
            String dob = person.getDateOfBirth();

            Account account = new Account();
            account.setCmmId(cmmId);
            account.setName(name);
            account.setDob(dob != null ? dob : "");
            account.setStatus(memberships.get(0).getStatus() != null ? memberships.get(0).getStatus() : "");
            account.setStartDate(""); // Set as needed
            account.setEndDate("");   // Set as needed

            accounts.add(account);
        }
    }

    private void processDependent(List<Account> accounts, Dependent dependent) {
        Person person = dependent.getPerson();
        MembershipIdentifier membershipIdentifier = dependent.getMembershipIdentifier();

        Account account = new Account();
        account.setCmmId(membershipIdentifier.getResourceId());
        account.setName(person.getNameFirst() + " " + person.getNameLast());
        account.setDob(person.getDateOfBirth() != null ? person.getDateOfBirth() : "");
        account.setStatus(""); // Set appropriately if needed
        account.setStartDate(""); // Set as needed
        account.setEndDate("");   // Set as needed

        accounts.add(account);
    }
}
